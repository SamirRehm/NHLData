as.data.frame(sb)
runApp('NHLData/NHLData')
sb <- with(PBP, t(table(PBP$team.triCode, PBP$result.event)))
sb <- dcast(sb, PBP$team.triCode ~ PBP$result.event)
sb <- with(PBP, t(table(PBP$team.triCode, PBP$result.event)))
install.packages("kable")
knitr::kable(sb)
runApp('NHLData/NHLData')
sb <- with(PBP, t(table(PBP$team.triCode, PBP$result.event)))
sb
knitr::kable(sb)
runApp('NHLData/NHLData')
runApp('NHLData/NHLData')
shiny::runGist("https://gist.github.com/haozhu233/9e675e1a8a1bb4744f9ebc9246a2366b")
playbyplay <- c("Goal", "Shot", "Shot", "Miss")
playbyplay <- factor(playbyplay, levels = c("Goal", "Shot", "Miss", "Hit"))
table(playbyplay)
playbyplay <- factor(playbyplay, levels = c("Goal", "Shot", "Hit", "Miss"))
table(playbyplay)
print(sb)
runApp('NHLData/NHLData')
runApp('NHLData/NHLData')
Team1Stats <- table(PBPTeam1$result.event)
data.frame(Team1Stats$Freq, Team2Stats$Freq)
print(Team1Stats)
x <- data.frame(Team1Stats, Team2Stats)
runApp('NHLData/NHLData')
setwd("/Users/Samir Rehmtulla/Documents/Training-Data-Website")
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(sp)
library(googleway)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("recovery", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
urlP3 <- rep("?", length(ids))
urlP4 <- rep("/streams?keys=time,distance,velocity_smooth&key_by_type=true&", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP3, urlP2, sep="")
StreamURLs <- paste(urlP1, ids, urlP4, urlP2, sep= "")
Polylines <- c()
DistanceStreams <- c()
TimeStreams <- c()
VelocityStreams <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
for(i in 1:length(StreamURLs)) {
Activity <- fromJSON(rawToChar(GET(url = StreamURLs[[i]])$content))
DistanceStream <- Activity$distance$data
TimeStream <- Activity$time$data
VelocityStream <- Activity$velocity_smooth$data
if(is.null(DistanceStream))
{ DistanceStreams[[i]] <- 0 } else { DistanceStreams[[i]] <- DistanceStream}
if(is.null(TimeStream))
{ TimeStreams[[i]] <- 0 } else { TimeStreams[[i]] <- TimeStream}
if(is.null(VelocityStream))
{ VelocityStreams[[i]] <- 0 } else { VelocityStreams[[i]] <- VelocityStream}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
i <- rep(RunningData$Date[[1]], nrow(RunningData))
RunningData$Week <- as.numeric(floor(difftime(RunningData$Date, i, units = "weeks") + 0.01) + 1)
RunningData$DistanceStreams <- DistanceStreams
RunningData$TimeStreams <- TimeStreams
RunningData$VelocityStreams <- VelocityStreams
OriginalRunningData <- RunningData
write.csv(OriginalRunningData, "RunningData.csv")
RunningDataList <- split(RunningData, RunningData$Week)
save(RunningDataList, file = "data.RData")
rmarkdown::render_site()
for (weekOfPlan in c(unique(OriginalRunningData$Week))){
rmarkdown::render('/Users/Samir Rehmtulla/Documents/Training-Data-Website/Week1AdvancedStatistics.Rmd',
output_file =  paste("report_", weekOfPlan, ".html", sep=''),
output_dir = '/Users/Samir Rehmtulla/Documents/Training-Data-Website')
}
setwd("/Users/Samir Rehmtulla/Documents/Training-Data-Website")
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(sp)
library(googleway)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("recovery", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
urlP3 <- rep("?", length(ids))
urlP4 <- rep("/streams?keys=time,distance,velocity_smooth&key_by_type=true&", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP3, urlP2, sep="")
StreamURLs <- paste(urlP1, ids, urlP4, urlP2, sep= "")
Polylines <- c()
DistanceStreams <- c()
TimeStreams <- c()
VelocityStreams <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
for(i in 1:length(StreamURLs)) {
Activity <- fromJSON(rawToChar(GET(url = StreamURLs[[i]])$content))
DistanceStream <- Activity$distance$data
TimeStream <- Activity$time$data
VelocityStream <- Activity$velocity_smooth$data
if(is.null(DistanceStream))
{ DistanceStreams[[i]] <- 0 } else { DistanceStreams[[i]] <- DistanceStream}
if(is.null(TimeStream))
{ TimeStreams[[i]] <- 0 } else { TimeStreams[[i]] <- TimeStream}
if(is.null(VelocityStream))
{ VelocityStreams[[i]] <- 0 } else { VelocityStreams[[i]] <- VelocityStream}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
i <- rep(RunningData$Date[[1]], nrow(RunningData))
RunningData$Week <- as.numeric(floor(difftime(RunningData$Date, i, units = "weeks") + 0.01) + 1)
RunningData$DistanceStreams <- DistanceStreams
RunningData$TimeStreams <- TimeStreams
RunningData$VelocityStreams <- VelocityStreams
OriginalRunningData <- RunningData
write.csv(OriginalRunningData, "RunningData.csv")
RunningDataList <- split(RunningData, RunningData$Week)
save(RunningDataList, file = "data.RData")
rmarkdown::render_site()
setwd("/Users/Samir Rehmtulla/Documents/Training-Data-Website")
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(sp)
library(googleway)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("recovery", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
urlP3 <- rep("?", length(ids))
urlP4 <- rep("/streams?keys=time,distance,velocity_smooth&key_by_type=true&", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP3, urlP2, sep="")
StreamURLs <- paste(urlP1, ids, urlP4, urlP2, sep= "")
Polylines <- c()
DistanceStreams <- c()
TimeStreams <- c()
VelocityStreams <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
for(i in 1:length(StreamURLs)) {
Activity <- fromJSON(rawToChar(GET(url = StreamURLs[[i]])$content))
DistanceStream <- Activity$distance$data
TimeStream <- Activity$time$data
VelocityStream <- Activity$velocity_smooth$data
if(is.null(DistanceStream))
{ DistanceStreams[[i]] <- 0 } else { DistanceStreams[[i]] <- DistanceStream}
if(is.null(TimeStream))
{ TimeStreams[[i]] <- 0 } else { TimeStreams[[i]] <- TimeStream}
if(is.null(VelocityStream))
{ VelocityStreams[[i]] <- 0 } else { VelocityStreams[[i]] <- VelocityStream}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- plyr::rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
i <- rep(RunningData$Date[[1]], nrow(RunningData))
RunningData$Week <- as.numeric(floor(difftime(RunningData$Date, i, units = "weeks") + 0.01) + 1)
RunningData$DistanceStreams <- DistanceStreams
RunningData$TimeStreams <- TimeStreams
RunningData$VelocityStreams <- VelocityStreams
OriginalRunningData <- RunningData
write.csv(OriginalRunningData, "RunningData.csv")
RunningDataList <- split(RunningData, RunningData$Week)
save(RunningDataList, file = "data.RData")
rmarkdown::render_site()
for (weekOfPlan in c(unique(OriginalRunningData$Week))){
rmarkdown::render('/Users/Samir Rehmtulla/Documents/Training-Data-Website/Week1AdvancedStatistics.Rmd',
output_file =  paste("report_", weekOfPlan, ".html", sep=''),
output_dir = '/Users/Samir Rehmtulla/Documents/Training-Data-Website')
}
setwd("/Users/Samir Rehmtulla/Documents/Training-Data-Website")
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(sp)
library(googleway)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("recovery", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
urlP3 <- rep("?", length(ids))
urlP4 <- rep("/streams?keys=time,distance,velocity_smooth&key_by_type=true&", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP3, urlP2, sep="")
StreamURLs <- paste(urlP1, ids, urlP4, urlP2, sep= "")
Polylines <- c()
DistanceStreams <- c()
TimeStreams <- c()
VelocityStreams <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
for(i in 1:length(StreamURLs)) {
Activity <- fromJSON(rawToChar(GET(url = StreamURLs[[i]])$content))
DistanceStream <- Activity$distance$data
TimeStream <- Activity$time$data
VelocityStream <- Activity$velocity_smooth$data
if(is.null(DistanceStream))
{ DistanceStreams[[i]] <- 0 } else { DistanceStreams[[i]] <- DistanceStream}
if(is.null(TimeStream))
{ TimeStreams[[i]] <- 0 } else { TimeStreams[[i]] <- TimeStream}
if(is.null(VelocityStream))
{ VelocityStreams[[i]] <- 0 } else { VelocityStreams[[i]] <- VelocityStream}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- plyr::rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
i <- rep(RunningData$Date[[1]], nrow(RunningData))
RunningData$Week <- as.numeric(floor(difftime(RunningData$Date, i, units = "weeks") + 0.01) + 1)
RunningData$DistanceStreams <- DistanceStreams
RunningData$TimeStreams <- TimeStreams
RunningData$VelocityStreams <- VelocityStreams
OriginalRunningData <- RunningData
RunningDataList <- split(RunningData, RunningData$Week)
save(RunningDataList, file = "data.RData")
rmarkdown::render_site()
for (weekOfPlan in c(unique(OriginalRunningData$Week))){
rmarkdown::render('/Users/Samir Rehmtulla/Documents/Training-Data-Website/Week1AdvancedStatistics.Rmd',
output_file =  paste("report_", weekOfPlan, ".html", sep=''),
output_dir = '/Users/Samir Rehmtulla/Documents/Training-Data-Website')
}
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
PBP <- PBP[!is.na(PBP$team.triCode),]
invalidateLater(10000, session)
gameID <- input$GameID
gameData <- jsonlite::fromJSON(rawToChar(httr::GET(url = paste("http://statsapi.web.nhl.com/api/v1/game/", gameID, "/feed/live", sep = ""))$content))
PBP <- gameData$liveData$plays$allPlays
PBP <- flatten(PBP)
gameID <- 2017021095#input$GameID
gameData <- jsonlite::fromJSON(rawToChar(httr::GET(url = paste("http://statsapi.web.nhl.com/api/v1/game/", gameID, "/feed/live", sep = ""))$content))
PBP <- gameData$liveData$plays$allPlays
PBP <- flatten(PBP)
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
library(DT)
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
runApp('~/NHLData/NHLData')
grob(p)
print(grob(p))
print(p)
pbpfilter <- PBP[!is.na(PBP$team.triCode),]
modifiedCoords <- pbpfilter$coordinates.x * (2*(pbpfilter$about.period %% 2) - 1)
p <- ggplot( data = pbpfilter, aes(x = modifiedCoords, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE) +
geom_point(aes(color = pbpfilter$team.triCode, shape = pbpfilter$result.event), size = 2) +
scale_shape_manual(values = c(7, 13, 3, 11, 20, 21, 22, 23, 24, 25)) +
theme(legend.title=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) +
theme(legend.position = "bottom")
rink <- readJPEG("NHLRink.jpg")
setwd("C:/Users/Samir Rehmtulla/Documents/NHLData/NHLData")
rink <- readJPEG("NHLRink.jpg")
p <- ggplot( data = pbpfilter, aes(x = modifiedCoords, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE) +
geom_point(aes(color = pbpfilter$team.triCode, shape = pbpfilter$result.event), size = 2) +
scale_shape_manual(values = c(7, 13, 3, 11, 20, 21, 22, 23, 24, 25)) +
theme(legend.title=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) +
theme(legend.position = "bottom")
p <- ggplotly(p) %>% layout(legend = list(orientation = 'h', y = -0.1, xanchor = 'left', yanchor = 'bottom'))
print(class(p))
grob(p)
x<-grob(p)
x[1]
x[[1]]
x[[2]]
x[[3]]
x[[4]]
x[[5]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pbpfilter <- PBP[!is.na(PBP$team.triCode),]
modifiedCoords <- pbpfilter$coordinates.x * (2*(pbpfilter$about.period %% 2) - 1)
p <- ggplot( data = pbpfilter, aes(x = modifiedCoords, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE) +
geom_point(aes(color = pbpfilter$team.triCode, shape = pbpfilter$result.event), size = 2) +
scale_shape_manual(values = c(7, 13, 3, 11, 20, 21, 22, 23, 24, 25)) +
theme(legend.title=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) +
theme(legend.position = "bottom", legend.text = element_text(size = 5)) + theme(legend.key.height = unit(12, "cm"))
p <- ggplotly(p)
p
p <- ggplot( data = pbpfilter, aes(x = modifiedCoords, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE) +
geom_point(aes(color = pbpfilter$team.triCode, shape = pbpfilter$result.event), size = 2) +
scale_shape_manual(values = c(7, 13, 3, 11, 20, 21, 22, 23, 24, 25)) +
theme(legend.title=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) +
theme(legend.position = "bottom", legend.text = element_text(size = 5)) + theme(legend.key = element_rect(colour = "blule"))
p <- ggplotly(p)
p
p <- ggplot( data = pbpfilter, aes(x = modifiedCoords, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE) +
geom_point(aes(color = pbpfilter$team.triCode, shape = pbpfilter$result.event), size = 2) +
scale_shape_manual(values = c(7, 13, 3, 11, 20, 21, 22, 23, 24, 25)) +
theme(legend.title=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) +
theme(legend.position = "bottom", legend.text = element_text(size = 5)) + theme(legend.key = element_rect(colour = "blule"))
p
p <- ggplot( data = pbpfilter, aes(x = modifiedCoords, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -100, 100, -42.5, 42.5, interpolate=FALSE) +
geom_point(aes(color = pbpfilter$team.triCode, shape = pbpfilter$result.event), size = 2) +
scale_shape_manual(values = c(7, 13, 3, 11, 20, 21, 22, 23, 24, 25)) +
theme(legend.title=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank()) +
theme(legend.position = "bottom", legend.text = element_text(size = 5)) + theme(legend.key = element_rect(colour = "blue"))
p
p <- ggplotly(p)
p
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
devtools::install_github('hadley/ggplot2')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
devtools::install_github('hadley/ggplot2')
#  sidebarPanel(
#     numericInput(inputId = "GameID", label = "Enter Game ID", value = 10), width = 3,
#     div(tableOutput("TeamStats"), style = "font-size: 65%")
#  ),
# Show a plot of the generated distribution
#  mainPanel(
#    plotlyOutput("NHLPLot"), div(dataTableOutput("PlaySummary"), style = "font-size: 65%; width: 40%; height: 75%"), fluid = TRUE
#  )
#  )
#))
install.packages("shiny")
