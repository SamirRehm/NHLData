for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
View(RunningData)
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/yaml")
library(yaml)
install.packages("yaml")
install.packages("yaml")
devtools::install_github("rstudio/rmarkdown")
install.packages("base64enc", type="binary")
install.packages("jsonlite", type="binary")
devtools::install_github("rstudio/rmarkdown")
rsconnect::deployApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rsconnect::deployApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rsconnect::deployApp("TrainingDataShiny")
shiny::runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
rsconnect::deployApp()
rsconnect::deployApp("TrainingDataShiny")
runApp('TrainingDataShiny')
rsconnect::deployApp("TrainingDataShiny")
runApp('TrainingDataShiny')
rsconnect::deployApp("TrainingDataShiny")
runApp('TrainingDataShiny')
rsconnect::deployApp("TrainingDataShiny")
library(nhlscrapr)
games = full.game.database(extra.seasons = 3)
thisyear = "20172018"
game_ids = subset(games, season == thisyear)
source("Patch for nhlscrapr.r")
library(nhlscrapr)
games = full.game.database(extra.seasons = 3)
thisyear = "20172018"
game_ids = subset(games, season == thisyear)
dummy = download.games(games = game_ids, wait = 5)
dummy = download.games(games = game_ids, wait = 5)
process.games(games=game_ids,override.download=FALSE)
gc()
compile.all.games(output.file="NHL play-by-play 2017-8.RData")
View(game_ids)
dummy = download.games(games = game_ids, wait = 0)
process.games(games=game_ids,override.download=FALSE)
gc()
compile.all.games(output.file="NHL play-by-play 2017-8.RData")
ggplot(data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE)  #+ ggimage::geom_image(image = pbpfilter$X.GoalHorn.png., size = 0.05))
library(ggimage)
library(shiny)
library(png)
library(raster)
library(grid)
library(jpeg)
library(plotly)
library(jsonlite)
library(httr)
library(htmlwidgets)
library(ggplot2)
rink <- readJPEG("NHLRink.jpg")
gameData <- jsonlite::fromJSON(rawToChar(httr::GET(url = paste("http://statsapi.web.nhl.com/api/v1/game/", gameID, "/feed/live", sep = ""))$content))
gameID <- 2017021095
gameData <- jsonlite::fromJSON(rawToChar(httr::GET(url = paste("http://statsapi.web.nhl.com/api/v1/game/", gameID, "/feed/live", sep = ""))$content))
PBP <- gameData$liveData$plays$allPlays
PBP <- flatten(PBP)
pbpfilter <- PBP[!is.na(PBP$team.triCode),]
pbpfilter <- data.frame(pbpfilter)
modifiedCoords <- pbpfilter$coordinates.x * (2*(pbpfilter$about.period %% 2) - 1)
ggplot(data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE)  #+ ggimage::geom_image(image = pbpfilter$X.GoalHorn.png., size = 0.05))
runApp('NHLData/NHLData')
runApp('NHLData/NHLData')
runApp('NHLData/NHLData')
runApp('NHLData/NHLData')
runApp('NHLData/NHLData')
runApp('NHLData/NHLData')
runApp('NHLData/NHLData')
runApp('Test')
runApp(list(ui = ui, server = server))
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library("shiny")
library("ggplot2")
ui <- pageWithSidebar(
headerPanel("Tooltips in ggplot2 + shiny"),
sidebarPanel(
HTML("Tooltips are managed by combination of shiny+ggplot hover functionality",
"and css styles. By setting hover argument of 'plotOutput' we could access",
"hover data from the server side, as an ordinary input. Hover input is",
"a list with: position of cursor ON the image; domain - that is",
"values of variables at the plotting area edges; range - that is position",
"of plotting area edges in pixels relative to whole image element.",
"Additionally for ggplot used mappings are returned. </br>",
"To create tooltip first we need to identify position of the cursor",
"inside the image element. We do it by calculating distances from left and",
"top edge of image element from hover data. Then we create tooltip, in this",
"app it is 'wellPanel' with some info inside, and set 'position' property",
"to 'absolute' and set 'left' and 'top' properties to calculated values.",
"However, 'absolute' position is defined as relative to the nearest positioned",
"ancestor. Because we want to position tooltip inside the image, we need",
"to put both 'plotOutput' with image and 'uiOutput' with tooltip content",
"inside additional 'div' element with 'position' property set to 'relative'.",
"We don't set top, left etc. for this element, so the actual position of",
"the image doesn't change - it's edges are identical as previously, so",
"we can use 'div' (for positioning tooltip) as substitute for image. </br>"),
width = 3
),
mainPanel(
# this is an extra div used ONLY to create positioned ancestor for tooltip
# we don't change its position
div(
style = "position:relative",
plotOutput("scatterplot",
hover = hoverOpts("plot_hover", delay = 100, delayType = "debounce")),
uiOutput("hover_info")
),
width = 7
)
)
server <- function(input, output) {
output$scatterplot <- renderPlot({
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point()
})
output$hover_info <- renderUI({
hover <- input$plot_hover
point <- nearPoints(mtcars, hover, threshold = 5, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Car: </b>", rownames(point), "<br/>",
"<b> mpg: </b>", point$mpg, "<br/>",
"<b> hp: </b>", point$hp, "<br/>",
"<b> Distance from left: </b>", left_px, "<b>, from top: </b>", top_px)))
)
})
}
runApp(list(ui = ui, server = server))
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library("shiny")
library("ggplot2")
ui <- pageWithSidebar(
headerPanel("Tooltips in ggplot2 + shiny"),
sidebarPanel(
HTML("Tooltips are managed by combination of shiny+ggplot hover functionality",
"and css styles. By setting hover argument of 'plotOutput' we could access",
"hover data from the server side, as an ordinary input. Hover input is",
"a list with: position of cursor ON the image; domain - that is",
"values of variables at the plotting area edges; range - that is position",
"of plotting area edges in pixels relative to whole image element.",
"Additionally for ggplot used mappings are returned. </br>",
"To create tooltip first we need to identify position of the cursor",
"inside the image element. We do it by calculating distances from left and",
"top edge of image element from hover data. Then we create tooltip, in this",
"app it is 'wellPanel' with some info inside, and set 'position' property",
"to 'absolute' and set 'left' and 'top' properties to calculated values.",
"However, 'absolute' position is defined as relative to the nearest positioned",
"ancestor. Because we want to position tooltip inside the image, we need",
"to put both 'plotOutput' with image and 'uiOutput' with tooltip content",
"inside additional 'div' element with 'position' property set to 'relative'.",
"We don't set top, left etc. for this element, so the actual position of",
"the image doesn't change - it's edges are identical as previously, so",
"we can use 'div' (for positioning tooltip) as substitute for image. </br>"),
width = 3
),
mainPanel(
# this is an extra div used ONLY to create positioned ancestor for tooltip
# we don't change its position
div(
style = "position:relative",
plotOutput("scatterplot",
hover = hoverOpts("plot_hover", delay = 0, delayType = "debounce")),
uiOutput("hover_info")
),
width = 7
)
)
server <- function(input, output) {
output$scatterplot <- renderPlot({
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point()
})
output$hover_info <- renderUI({
hover <- input$plot_hover
point <- nearPoints(mtcars, hover, threshold = 5, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Car: </b>", rownames(point), "<br/>",
"<b> mpg: </b>", point$mpg, "<br/>",
"<b> hp: </b>", point$hp, "<br/>",
"<b> Distance from left: </b>", left_px, "<b>, from top: </b>", top_px)))
)
})
}
runApp(list(ui = ui, server = server))
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library("shiny")
library("ggplot2")
ui <- pageWithSidebar(
headerPanel("Tooltips in ggplot2 + shiny"),
sidebarPanel(
HTML("Tooltips are managed by combination of shiny+ggplot hover functionality",
"and css styles. By setting hover argument of 'plotOutput' we could access",
"hover data from the server side, as an ordinary input. Hover input is",
"a list with: position of cursor ON the image; domain - that is",
"values of variables at the plotting area edges; range - that is position",
"of plotting area edges in pixels relative to whole image element.",
"Additionally for ggplot used mappings are returned. </br>",
"To create tooltip first we need to identify position of the cursor",
"inside the image element. We do it by calculating distances from left and",
"top edge of image element from hover data. Then we create tooltip, in this",
"app it is 'wellPanel' with some info inside, and set 'position' property",
"to 'absolute' and set 'left' and 'top' properties to calculated values.",
"However, 'absolute' position is defined as relative to the nearest positioned",
"ancestor. Because we want to position tooltip inside the image, we need",
"to put both 'plotOutput' with image and 'uiOutput' with tooltip content",
"inside additional 'div' element with 'position' property set to 'relative'.",
"We don't set top, left etc. for this element, so the actual position of",
"the image doesn't change - it's edges are identical as previously, so",
"we can use 'div' (for positioning tooltip) as substitute for image. </br>"),
width = 3
),
mainPanel(
# this is an extra div used ONLY to create positioned ancestor for tooltip
# we don't change its position
div(
style = "position:relative",
plotOutput("scatterplot",
hover = hoverOpts("plot_hover", delay = 0, delayType = "debounce")),
uiOutput("hover_info")
),
width = 7
)
)
server <- function(input, output) {
output$scatterplot <- renderPlot({
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point()
})
output$hover_info <- renderUI({
hover <- input$plot_hover
point <- nearPoints(mtcars, hover, threshold = 5, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Car: </b>", rownames(point), "<br/>",
"<b> mpg: </b>", point$mpg, "<br/>",
"<b> hp: </b>", point$hp, "<br/>",
"<b> Distance from left: </b>", left_px, "<b>, from top: </b>", top_px)))
)
})
}
runApp(list(ui = ui, server = server))
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library("shiny")
library("ggplot2")
ui <- pageWithSidebar(
headerPanel("Tooltips in ggplot2 + shiny"),
sidebarPanel(
HTML("Tooltips are managed by combination of shiny+ggplot hover functionality",
"and css styles. By setting hover argument of 'plotOutput' we could access",
"hover data from the server side, as an ordinary input. Hover input is",
"a list with: position of cursor ON the image; domain - that is",
"values of variables at the plotting area edges; range - that is position",
"of plotting area edges in pixels relative to whole image element.",
"Additionally for ggplot used mappings are returned. </br>",
"To create tooltip first we need to identify position of the cursor",
"inside the image element. We do it by calculating distances from left and",
"top edge of image element from hover data. Then we create tooltip, in this",
"app it is 'wellPanel' with some info inside, and set 'position' property",
"to 'absolute' and set 'left' and 'top' properties to calculated values.",
"However, 'absolute' position is defined as relative to the nearest positioned",
"ancestor. Because we want to position tooltip inside the image, we need",
"to put both 'plotOutput' with image and 'uiOutput' with tooltip content",
"inside additional 'div' element with 'position' property set to 'relative'.",
"We don't set top, left etc. for this element, so the actual position of",
"the image doesn't change - it's edges are identical as previously, so",
"we can use 'div' (for positioning tooltip) as substitute for image. </br>"),
width = 3
),
mainPanel(
# this is an extra div used ONLY to create positioned ancestor for tooltip
# we don't change its position
div(
style = "position:relative",
plotOutput("scatterplot",
hover = hoverOpts("plot_hover", delay = 0, delayType = "debounce")),
uiOutput("hover_info")
),
width = 7
)
)
server <- function(input, output) {
output$scatterplot <- renderPlot({
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point()
})
output$hover_info <- renderUI({
hover <- input$plot_hover
point <- nearPoints(mtcars, hover, threshold = 100, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Car: </b>", rownames(point), "<br/>",
"<b> mpg: </b>", point$mpg, "<br/>",
"<b> hp: </b>", point$hp, "<br/>",
"<b> Distance from left: </b>", left_px, "<b>, from top: </b>", top_px)))
)
})
}
runApp(list(ui = ui, server = server))
source('Test/app.R')
runApp('NHLData/NHLData')
library(grid)
library(ggplot2)
library(gridExtra)
library(gtable)
p <- ggplot(data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png., size = 0.05))
p
p <- ggplot(data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png.))
p
PBP <- gameData$liveData$plays$allPlays
PBP <- flatten(PBP)
pbpfilter <- PBP[!is.na(PBP$team.triCode),]
pbpfilter <- data.frame(pbpfilter, "GoalHorn.png")
p <- ggplot(data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png.))
output$NHLPLot <- renderPlot({
invalidateLater(10000, session)
gameID <- input$GameID
gameData <- jsonlite::fromJSON(rawToChar(httr::GET(url = paste("http://statsapi.web.nhl.com/api/v1/game/", gameID, "/feed/live", sep = ""))$content))
PBP <- gameData$liveData$plays$allPlays
PBP <- flatten(PBP)
pbpfilter <- PBP[!is.na(PBP$team.triCode),]
pbpfilter <- data.frame(pbpfilter, "GoalHorn.png")
modifiedCoords <- pbpfilter$coordinates.x * (2*(pbpfilter$about.period %% 2) - 1)
p <- ggplot(data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png.))
#plot_ly(data = PBP, marker = list(size = 12), x = PBP$coordinates.x, y = PBP$coordinates.y, symbol = PBP$result.event, color = as.factor(PBP$team.triCode))
})
p
setwd("C:\Users\Samir Rehmtulla\Documents\NHLData\NHLData")
setwd("C:/Users/Samir Rehmtulla/Documents/NHLData/NHLData")
p <- ggplot(data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png.))
p
## Data:
n <- 10
x <- stats::runif(n) ; y1 <- stats::runif(n) ; y2 <- stats::runif(n)
## Construct the grobs :
plot <- gTree(children=gList(rectGrob(),
pointsGrob(x, y1, pch=21, gp=gpar(col=2, fill="gray")),
pointsGrob(x, y2, pch=22, gp=gpar(col=3, fill="gray")),
xaxisGrob(),
yaxisGrob()))
legd <- legendGrob(c("Girls", "Boys", "Other"), pch=21:23,
gp=gpar(col = 2:4, fill = "gray"))
gg <- packGrob(packGrob(frameGrob(), plot),
legd, height=unit(1,"null"), side="right")
## Now draw it on a new device page:
grid.newpage()
pushViewport(viewport(width=0.8, height=0.8))
grid.draw(gg)
## Construct the grobs :
plot <-ggplot( data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png.))
legd <- legendGrob(c("Girls", "Boys", "Other"), pch=21:23,
gp=gpar(col = 2:4, fill = "gray"))
gg <- packGrob(packGrob(frameGrob(), plot),
legd, height=unit(1,"null"), side="right")
## Construct the grobs :
plot <-ggplotGrob( data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png.))
legd <- legendGrob(c("Girls", "Boys", "Other"), pch=21:23,
gp=gpar(col = 2:4, fill = "gray"))
gg <- packGrob(packGrob(frameGrob(), plot),
legd, height=unit(1,"null"), side="right")
## Construct the grobs :
plot <-ggplotGrob( aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png.))
## Construct the grobs :
plot <-ggplot( data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png.))
plot <-ggplotGrob(plot)
legd <- legendGrob(c("Girls", "Boys", "Other"), pch=21:23,
gp=gpar(col = 2:4, fill = "gray"))
gg <- packGrob(packGrob(frameGrob(), plot),
legd, height=unit(1,"null"), side="right")
grid.draw(gg)
## Now draw it on a new device page:
grid.newpage()
pushViewport(viewport(width=0.8, height=0.8))
grid.draw(gg)
## Construct the grobs :
plot <-ggplot( data = pbpfilter, aes(x = pbpfilter$coordinates.x, y = pbpfilter$coordinates.y)) + annotation_raster(rink, -101, 101, -43, 43, interpolate=FALSE) + ggimage::geom_image(aes(image = pbpfilter$X.GoalHorn.png.))
plot <-ggplotGrob(plot)
legd <- legendGrob(c("Girls", "Boys", "Other"), pch=21:23,
gp=gpar(col = 2:4, fill = "gray"))
gg <- packGrob(packGrob(frameGrob(), plot),
legd, height=unit(1,"null"), side="right")
## Now draw it on a new device page:
grid.newpage()
pushViewport(viewport(width=0.8, height=0.8))
grid.draw(gg)
